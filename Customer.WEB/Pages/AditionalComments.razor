@page "/aditionalComments"
@inject IRepository repository
@inject ISessionStorageService sessionStorage

<h3>AditionalComments</h3>

<EditForm Model="@designACDTO">

    <div class="card card-custom card-compact">
        <div class="card-title">
            <div class="col-md-8 pl-0">Tipo de emplazamiento</div>
        </div>
        <div class="card-content">
            <div class="content-form form-row">
                <div class="col-3 form-group has-float-label">
                    <InputSelect @bind-Value="designACDTO.DesignACSiteTypeDTO.StationId" Id="designACDTO.DesignACSiteTypeDTO.StationId" class="form-control">
                        @foreach (var item in designACDTO.DesignACSiteTypeDTO.TypeStations)
                        {
                            <option value="@item.Id" selected="@(item.Id == designACDTO.DesignACSiteTypeDTO.StationId)">@item.Name</option>
                        }
                    </InputSelect>
                    <label for="radioPosition">Estación</label>
                </div>
                <div class="col-3 form-group has-float-label">
                    <InputSelect @bind-Value="designACDTO.DesignACSiteTypeDTO.StandId" Id="designACDTO.DesignACSiteTypeDTO.StandId" class="form-control">
                        @foreach (var item in designACDTO.DesignACSiteTypeDTO.TypeStands)
                        {
                            <option value="@item.Id" selected="@(item.Id == designACDTO.DesignACSiteTypeDTO.StandId)">@item.Name</option>
                        }
                    </InputSelect>
                    <label for="radioPosition">Tipo de caseta</label>
                </div>
                <div class="col-3 form-group has-float-label">
                    <InputSelect @bind-Value="designACDTO.DesignACSiteTypeDTO.OutdoorInstallationId" Id="designACDTO.DesignACSiteTypeDTO.OutdoorInstallationId" class="form-control">
                        @foreach (var item in designACDTO.DesignACSiteTypeDTO.TypeOutdoorInstallations)
                        {
                            <option value="@item.Id" selected="@(item.Id == designACDTO.DesignACSiteTypeDTO.OutdoorInstallationId)">@item.Name</option>
                        }
                    </InputSelect>
                    <label for="radioPosition">Tipo de instalación</label>
                </div>
                <div class="col-3 form-group has-float-label">
                    <InputSelect @bind-Value="designACDTO.DesignACSiteTypeDTO.SiteOwnerId" Id="designACDTO.DesignACSiteTypeDTO.SiteOwnerId" class="form-control">
                        @foreach (var item in designACDTO.DesignACSiteTypeDTO.TypeSiteOwners)
                        {
                            <option value="@item.Id" selected="@(item.Id == designACDTO.DesignACSiteTypeDTO.SiteOwnerId)">@item.Name</option>
                        }
                    </InputSelect>
                    <label for="radioPosition">Propietario del emplazamiento</label>
                </div>
            </div>
        </div>
    </div>

</EditForm>

@code {
    private string _id_replanteo;
    private string _site;
    private string _usuario;
    private string _operador;
    private string _idOperador;
    private string _empresa;
    private string _organizacion;
    private bool _administradorEmpresa;
    private string _proyecto;
    private string _pais;
    private string _seccion;

    private string _id_usuario;
    private InitialRequest initialRequest;

    public DesignACDTO designACDTO = new DesignACDTO();

    protected override async Task OnInitializedAsync()
    {
        _id_replanteo = await sessionStorage.GetItemAsStringAsync("AteneaId");
        _site = await sessionStorage.GetItemAsStringAsync("AteneaSite");
        _usuario = await sessionStorage.GetItemAsStringAsync("AteneaUsuario");
        _operador = await sessionStorage.GetItemAsStringAsync("AteneaOperador");
        _idOperador = await sessionStorage.GetItemAsStringAsync("AteneaIdOperador");
        _empresa = await sessionStorage.GetItemAsStringAsync("AteneaEmpresa");
        _organizacion = await sessionStorage.GetItemAsStringAsync("AteneaOrganizacion");
        _administradorEmpresa = bool.Parse(await sessionStorage.GetItemAsStringAsync("AteneaAdministradorEmpresa"));
        _proyecto = await sessionStorage.GetItemAsStringAsync("AteneaProyecto");
        _pais = await sessionStorage.GetItemAsStringAsync("AteneaPais");
        _seccion = await sessionStorage.GetItemAsStringAsync("AteneaSeccion");

        //Check init
        initialRequest = new InitialRequest
            {
                Administrator = _administradorEmpresa.ToString(),
                Company = _empresa,
                OperatorId = _idOperador,
                VersionId = _id_replanteo,
                Operator = _operador,
                Organization = _organizacion,
                Country = _pais,
                Project = _proyecto,
                Section = _seccion,
                Site = _site,
                User = _usuario
            };

        await CheckInitialAsync();
    }

    private async Task CheckInitialAsync()
    {
        try
        {
            var responseHttp = await repository.Post<InitialRequest, DesignAC>("/api/core/InitialChecks", initialRequest);
            if (responseHttp.Error)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                return;
            }

            _id_usuario = responseHttp.Response.User.Id.ToString();
            await sessionStorage.SetItemAsStringAsync("IdUsuarioMateriales", _id_usuario);

            await LoadAditionalCommentsAsync(responseHttp.Response.Id);
        }
        catch (Exception ex)
        {

        }
    }

    private async Task LoadAditionalCommentsAsync(int id)
    {
        var responseHTTP = await repository.Get<DesignACDTO>($"/api/designac/{id}");
        if (responseHTTP.Error)
        {
            var message = await responseHTTP.GetErrorMessageAsync();
            return;
        }

        designACDTO = responseHTTP.Response!;
    }
}
